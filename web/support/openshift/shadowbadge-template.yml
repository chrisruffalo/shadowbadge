apiVersion: v1
kind: Template
metadata:
  name: shadowbadge-app
objects:
# image stream target for maven builds
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: "shadowbadge-app-native"
    labels:
      app: "shadowbadge-app"
    spec:
      lookupPolicy:
        local: false
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: "shadowbadge-app-jvm"
    labels:
      app: "shadowbadge-app"
    spec:
      lookupPolicy:
        local: false
# build config target for maven builds
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    name: "shadowbadge-app-jvm"
    labels:
      app: "shadowbadge-app"
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: "shadowbadge-app-jvm:latest"
    postCommit: {}
    resources:
      limits:
        memory: 64Mi
      requests:
        memory: 64Mi
    runPolicy: SerialLatestOnly
    source:
      binary: {}
      type: Binary
    strategy:
      type: Docker
      dockerStrategy:
        from:
          kind: DockerImage
          name: ${JVM_IMAGE}
    triggers: []
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    name: "shadowbadge-app-native"
    labels:
      app: "shadowbadge-app"
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: "shadowbadge-app-native:latest"
    postCommit: {}
    resources:
      limits:
        memory: 64Mi
      requests:
        memory: 64Mi
    runPolicy: SerialLatestOnly
    source:
      binary: {}
      type: Binary
    strategy:
      type: Docker
      dockerStrategy:
        from:
          kind: DockerImage
          name: ${NATIVE_IMAGE}
    triggers: []
# service configuration
- apiVersion: v1
  kind: Service
  metadata:
    name: "shadowbadge-app"
    labels:
      app: shadowbadge-app
    annotations:
      # in openshift 4 create a tls.key/tls.crt in the given secret for default consumption
      "service.beta.openshift.io/serving-cert-secret-name": shadowbadge-certs
      # in openshift 3 create a tls.key/tls.crt in the given secret for default consumption
      "service.alpha.openshift.io/serving-cert-secret-name": shadowbadge-certs
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: 8443-tcp
      port: 8443
      protocol: TCP
      targetPort: 8443
    selector:
      app: shadowbadge-app
    sessionAffinity: None
    type: ClusterIP
# deployment configuration for shadowbadge
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: "shadowbadge-app"
    labels:
      app: shadowbadge-app
  spec:
    replicas: ${{REPLICA_COUNT}}
    revisionHistoryLimit: 5
    selector:
      deploymentConfig: shadowbadge-app
    strategy:
      type: Rolling
    template:
      metadata:
        name: "shadowbadge-app"
        labels:
          app: shadowbadge-app
          deploymentConfig: shadowbadge-app
      spec:
        containers:
        # shadowbadge application container
        - name: shadowbadge-app
          image: "shadowbadge-app-${IMAGE_TYPE}:latest"
          imagePullPolicy: Always
          # override quarkus environment variables to connect to postgres
          env:
          - name: QUARKUS_DATASOURCE_URL
            value: "jdbc:postgresql://${POSTGRES_SERVICE}:${POSTGRES_PORT}/shadowbadge"
          - name: QUARKUS_DATASOURCE_USERNAME
            value: "${POSTGRES_USER}"
          - name: QUARKUS_DATASOURCE_PASSWORD
            value: "${POSTGRES_PASSWORD}"
          - name: SHADOWBADGE_EXTERNAL_URL
            value: "https://${EXTERNAL_HOST}"
          - name: KEYCLOAK_SERVER_URL
            value: "https://${KEYCLOAK_HOST}/auth/realms/${KEYCLOAK_REALM}"
          - name: KEYCLOAK_CLIENT_ID
            value: "${KEYCLOAK_CLIENT_ID}"
          - name: KEYCLOAK_CLIENT_SECRET
            value: "${KEYCLOAK_CLIENT_SECRET}"
          - name: QUARKUS_HTTP_PORT
            value: "8080"
          - name: QUARKUS_HTTP_SSL_PORT
            value: "8443"
          - name: QUARKUS_HTTP_SSL_CERTIFICATE_FILE
            value: "/pki/tls.crt"
          - name: QUARKUS_HTTP_SSL_CERTIFICATE_KEY_FILE
            value: "/pki/tls.key"
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 7070
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 7070
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
            requests:
              memory: "128Mi"
          volumeMounts:
          - name: shadowbadge-certs-volume
            mountPath: /pki/
            readOnly: true
          dnsPolicy: ClusterFirst
          restartPolicy: Always
        volumes:
        - name: shadowbadge-certs-volume
          secret:
            secretName: ${CERTIFICATE_SECRET_NAME}
        triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
            - shadowbadge-app
            from:
              kind: ImageStreamTag
              name: shadowbadge-app-${IMAGE_TYPE}:latest
        - type: ConfigChange
parameters:
- name: IMAGE_TYPE
  displayName: Image Type
  description: Type of image to run, either 'native' or 'jvm' (case sensitive).
  value: jvm
  required: true
- name: JVM_IMAGE
  displayName: Upstream JVM Image
  description: Docker image, either 'fabric8/java-centos-openjdk11-jdk:latest' for JVM
  value: "fabric8/java-centos-openjdk11-jdk:latest"
  required: true
- name: NATIVE_IMAGE
  displayName: Upstream Native Image
  description:  Docker image 'registry.access.redhat.com/ubi8/ubi-minimal:latest' for native
  value: "registry.access.redhat.com/ubi8/ubi-minimal:latest"
- name: REPLICA_COUNT
  value: "1"
  required: true
- name: POSTGRES_SERVICE
  required: true
- name: POSTGRES_PORT
  value: "5432"
  required: true
- name: POSTGRES_DB
  required: true
- name: POSTGRES_USER
  required: true
- name: POSTGRES_PASSWORD
  required: true
- name: KEYCLOAK_HOST
  description: The hostname to the keycloak server used for authentication.
  required: true
- name: KEYCLOAK_REALM
  description: The name of the Keycloak realm to use.
  required: true
- name: KEYCLOAK_CLIENT_ID
  description: The name of the Keycloak client in the realm.
  required: true
- name: KEYCLOAK_CLIENT_SECRET
  description: The credential secret for the Keycloak client.
  required: true
- name: EXTERNAL_HOST
  description: The external route hostname. This template does not configure the routes but if you are using Gatekeeper this is the best way to make Shadowbadge correctly redirect.
  value: ""
- name: ENCRYPTION_KEY
  description: A key used to encrypt the value of the token exchange in Gatekeeper. Must be 16 or 32 characters. (Will be generated if left blank.)
  from: '[a-zA-Z0-9]{32}'
  generate: expression
  required: true
- name: CERTIFICATE_SECRET_NAME
  description: A certificate secret name where the secret has a 'tls.key' and 'tls.crt' file for use by Gatekeeper. By default uses the certificates created by the shadowbadge-app service.
  value: "shadowbadge-certs"
- name: MEMORY_LIMIT
  description: The upper memory limit of the Shadowbadge UI Pod
  value: "512Mi"
